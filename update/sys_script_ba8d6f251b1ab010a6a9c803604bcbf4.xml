<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_58872_needit_ips</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>IP Lookup</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	try {
		var queue = new NeedItEccQueueUtil(current.mid_server.name, 'JavascriptProbe');
		gs.error("Here");
		queue.setName('Get IP Details from MID Server.'); //Any descriptive name will do
		queue.setParameter({
			'ip': current.ip, 
			'script': 'var util = new GetIPDetailsUtil(); util.getIpDetails();'}
		);
		var resp = queue.getEccResponse(queue.create()).toString();
		setFields(current, JSON.parse(resp));
	} catch (error) {
		gs.error("ERROR: " + error);
		current.setAbortAction(true);
	}
// 	var body;
// 	var status;

// 	try {
// 		var ws = new sn_ws.RESTMessageV2();
// 		ws.setEndpoint('http://ipwhois.app/json/' + current.ip);
// 		ws.setHttpMethod('get');
// 		ws.setMIDServer(current.mid_server.name);
// 		ws.setEccParameter('skip_sensor', 'true');

// 		var response = ws.execute();
// 		body = response.haveError() ? response.getErrorMessage() : response.getBody();
// 		gs.info("Response: " + typeof(body));
// 		status = response.getStatusCode();
// 		gs.info("CITY: " + body.city);
// 		if (status == 200) {
// 			body = JSON.parse(body);
// 			setFields(current, body);
// 		}
// 	} catch (ex) {
// 		gs.error("Exception" + ex);
// 		current.setAbortAction(true);
// 	}
	
})(current, previous);

function setFields(current, data) {
	current.city = data.city;
	current.continent = data.continent;
	current.country = data.country;
	current.latitude = data.latitude;
	current.longitude = data.longitude;
	current.region = data.region;
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-31 05:22:15</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ba8d6f251b1ab010a6a9c803604bcbf4</sys_id>
        <sys_mod_count>63</sys_mod_count>
        <sys_name>IP Lookup</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_ba8d6f251b1ab010a6a9c803604bcbf4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-01 06:37:36</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=ba8d6f251b1ab010a6a9c803604bcbf4"/>
</record_update>
